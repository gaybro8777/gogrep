package main

var bundledFiles = [...]struct {
	name, encContent string
}{
	{"go.mod", "bW9kdWxlIG12ZGFuLmNjL2dvZ3JlcAoKcmVxdWlyZSAoCglnaXRodWIuY29tL3JvZ3BlcHBlL2dvLWludGVybmFsIHYxLjUuMQoJZ29sYW5nLm9yZy94L3Rvb2xzIHYwLjAuMC0yMDE5MTIyMzIzNTQxMC0zNzIxMjYyYjNlN2MKKQoKZ28gMS4xMwo"},
	{"go.sum", "Z2l0aHViLmNvbS9rci9wcmV0dHkgdjAuMS4wL2dvLm1vZCBoMTpkQXkzbGQ3bDlmMGliRE5PUU9ISE1ZWUlJYmhmYkhTbTNDNFpzb0pPUk5vPQpnaXRodWIuY29tL2tyL3B0eSB2MS4xLjEvZ28ubW9kIGgxOnBGUVluNjZXSHJPcFBZTmxqd09NcW8xMFRrWWgxZnkzY1lpbzJsM2JDc1E9CmdpdGh1Yi5jb20va3IvdGV4dCB2MC4xLjAvZ28ubW9kIGgxOjRKYnYrREpXM1VUL0xpT3dKZVlRZTFlZnF0VXgvaVZoYW0vNHZmZEFyTkk9CmdpdGh1Yi5jb20vcm9ncGVwcGUvZ28taW50ZXJuYWwgdjEuNS4xIGgxOmFzUTB1RDdCTjlSVTVJbTQxU0VFWlR3Q2kvekFYZE1PTFMzbnBZYW9zMmc9CmdpdGh1Yi5jb20vcm9ncGVwcGUvZ28taW50ZXJuYWwgdjEuNS4xL2dvLm1vZCBoMTp4WERDSlkrR0FQeml1cHFYdzY0VjI0c2tiU29xYlRFZmh5NHFHbTFuRFFjPQpnb2xhbmcub3JnL3gvY3J5cHRvIHYwLjAuMC0yMDE5MDMwODIyMTcxOC1jMjg0M2UwMWQ5YTIvZ28ubW9kIGgxOmRqTmdjRXIxL0MwNUFDa2cxaUxmaUpVNUVwNjFRVWtHVzhxcGRzc0kwK3c9CmdvbGFuZy5vcmcveC9jcnlwdG8gdjAuMC4wLTIwMTkxMDExMTkxNTM1LTg3ZGM4OWYwMTU1MC9nby5tb2QgaDE6eWlnRlU5dnFIellpRThVbXZLZWNha0VKamRuV2ozamo0OTlsbkZja2ZDST0KZ29sYW5nLm9yZy94L21vZCB2MC4xLjEtMC4yMDE5MTEwNTIxMDMyNS1jOTBlZmVlNzA1ZWUvZ28ubW9kIGgxOlFxUFRBdnlxc0ViY2VHekJ6TmdnRlhucnFGMUNhVWN2Z2tkUjVPdDdLWmc9CmdvbGFuZy5vcmcveC9uZXQgdjAuMC4wLTIwMTkwNDA0MjMyMzE1LWViNWJjYjUxZjJhMy9nby5tb2QgaDE6dDlIR3RmOEhPTng1ZVQycnRuN3E2ZVRxSUNZcVVWbktzM3RoSm8zUXBsZz0KZ29sYW5nLm9yZy94L25ldCB2MC4wLjAtMjAxOTA2MjAyMDAyMDctM2IwNDYxZWVjODU5L2dvLm1vZCBoMTp6NUNSVlRUVG1BSjY3N1R6TExHVSswYmpQTzBMa3VPTGk0LzVHdEpXcy9zPQpnb2xhbmcub3JnL3gvc3luYyB2MC4wLjAtMjAxOTA0MjMwMjQ4MTAtMTEyMjMwMTkyYzU4L2dvLm1vZCBoMTpSeE1nZXc1Vkp4enVlNS9qSlRFNXVlanBqVmxPZS9penJCNzBKb2Y3MmFNPQpnb2xhbmcub3JnL3gvc3lzIHYwLjAuMC0yMDE5MDIxNTE0Mjk0OS1kMGIxMWJkYWFjOGEvZ28ubW9kIGgxOlNUUDhEdkR5Yy9kSTViOFQ1aHNodGtqUytFNDJUbnlzTkNVUGRqY2lHaFk9CmdvbGFuZy5vcmcveC9zeXMgdjAuMC4wLTIwMTkwNDEyMjEzMTAzLTk3NzMyNzMzMDk5ZC9nby5tb2QgaDE6aDFOaldjZTlYUkxHUUVzVzd3cEtOQ2pHOUR0TmxDbFZ1RkxFWmRETmJFcz0KZ29sYW5nLm9yZy94L3RleHQgdjAuMy4wL2dvLm1vZCBoMTpOcU04RVVPVTE0bmprSjNmcU1XK3BjNkxkbndoaS9JanB3SHQ3eXl1d09RPQpnb2xhbmcub3JnL3gvdG9vbHMgdjAuMC4wLTIwMTkxMjIzMjM1NDEwLTM3MjEyNjJiM2U3YyBoMTpQZUZyeFE4WVRBS2c1M1VSOGFQL254YTgybFFZSWRiK3BkMWJmZzNkQkRNPQpnb2xhbmcub3JnL3gvdG9vbHMgdjAuMC4wLTIwMTkxMjIzMjM1NDEwLTM3MjEyNjJiM2U3Yy9nby5tb2QgaDE6VEIyYWRZQ2h5ZEpocGFwS0RUYTRCUi9oWGxaU0xvcTJXcGN0LzB0eFoyOD0KZ29sYW5nLm9yZy94L3hlcnJvcnMgdjAuMC4wLTIwMTkxMDExMTQxNDEwLTFiNTE0NmFkZDg5OC9nby5tb2QgaDE6SS81ejY5OHNuOUthOFRlSmM5TUtyb1VVZnFCQmF1V2pRcUxKMk9QZm1ZMD0KZ29wa2cuaW4vY2hlY2sudjEgdjEuMC4wLTIwMTgwNjI4MTczMTA4LTc4OGZkNzg0MDEyNy9nby5tb2QgaDE6Q282aWJWSkF6bkFhSWtxcDhodVR3bEpRQ1owMTZqb2YvY2JONFZXNVl6MD0KZ29wa2cuaW4vZXJyZ28udjIgdjIuMS4wIGgxOjB2TFQxM0V1dlEwaE52YWt3THVGWi9qWXJMcDVGM2tjV0hYZFJnZ2pDRTg9CmdvcGtnLmluL2VycmdvLnYyIHYyLjEuMC9nby5tb2QgaDE6aE5zZDFFWStib3pDS1kxWXRwOTZmcE0zdmpKYnFMSm44OHdzOFh2ZkROST0K"},
	{"mainpkg/mainpkg.go", "Ly8gQ29weXJpZ2h0IChjKSAyMDE5LCBEYW5pZWwgTWFydMOtIDxtdmRhbkBtdmRhbi5jYz4KLy8gU2VlIExJQ0VOU0UgZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbgoKcGFja2FnZSBtYWlucGtnCgppbXBvcnQgKAoJImZsYWciCgkiZm10IgoJImdvL2FzdCIKCSJnby90b2tlbiIKCSJpby9pb3V0aWwiCgkib3MiCgkic3RyaW5ncyIKCgkibXZkYW4uY2MvZ29ncmVwL2dzeW50YXgiCgkibXZkYW4uY2MvZ29ncmVwL2ludGVybmFsL2xvYWQiCgkibXZkYW4uY2MvZ29ncmVwL25scyIKKQoKdmFyIHRlc3RzID0gZmxhZy5Cb29sKCJ0ZXN0cyIsIGZhbHNlLCAic2VhcmNoIHRlc3QgcGFja2FnZXMgdG9vIikKCmZ1bmMgUnVuKGZ1bmNzIFtdbmxzLkZ1bmN0aW9uKSBpbnQgewoJZmxhZy5QYXJzZSgpCglhcmdzIDo9IGZsYWcuQXJncygpCglpZiBsZW4oYXJncykgPT0gMCB7CgkJZmxhZy5Vc2FnZSgpCgl9CgoJZnNldCA6PSB0b2tlbi5OZXdGaWxlU2V0KCkKCWcgOj0gJm5scy5HewoJCUZzZXQ6ICBmc2V0LAoJCVRlc3RzOiAqdGVzdHMsCgl9CglyZXN1bHRzLCBlcnIgOj0gcnVuKGcsIGZ1bmNzLCBhcmdzKQoJaWYgZXJyICE9IG5pbCB7CgkJZm10LkZwcmludGxuKG9zLlN0ZGVyciwgZXJyKQoJCXJldHVybiAxCgl9Cgl3ZCwgZXJyIDo9IG9zLkdldHdkKCkKCWlmIGVyciAhPSBuaWwgewoJCWZtdC5GcHJpbnRsbihvcy5TdGRlcnIsIGVycikKCQlyZXR1cm4gMQoJfQoJZm9yIF8sIG4gOj0gcmFuZ2UgcmVzdWx0cyB7CgkJZnBvcyA6PSBmc2V0LlBvc2l0aW9uKG4uUG9zKCkpCgkJaWYgc3RyaW5ncy5IYXNQcmVmaXgoZnBvcy5GaWxlbmFtZSwgd2QpIHsKCQkJZnBvcy5GaWxlbmFtZSA9IGZwb3MuRmlsZW5hbWVbbGVuKHdkKSsxOl0KCQl9CgkJZm10LlByaW50ZigiJXY6ICVzXG4iLCBmcG9zLCBnc3ludGF4LlByaW50Q29tcGFjdChuKSkKCX0KCXJldHVybiAwCn0KCmZ1bmMgcnVuKGcgKm5scy5HLCBmdW5jcyBbXW5scy5GdW5jdGlvbiwgYXJncyBbXXN0cmluZykgKFtdYXN0Lk5vZGUsIGVycm9yKSB7CglpZiBsZW4oYXJncykgPT0gMCB7CgkJaW5wdXQsIGVyciA6PSBpb3V0aWwuUmVhZEFsbChvcy5TdGRpbikKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiZXJyb3IgcmVhZGluZyBpbnB1dDogJXYiLCBlcnIpCgkJfQoJCW5vZGUsIGVyciA6PSBsb2FkLklucHV0KGcsIHN0cmluZyhpbnB1dCkpCgkJaWYgZXJyICE9IG5pbCB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImVycm9yIGxvYWRpbmcgaW5wdXQ6ICV2IiwgZXJyKQoJCX0KCQl2YXIgcmVzdWx0cyBbXWFzdC5Ob2RlCgkJZm9yIF8sIGZuIDo9IHJhbmdlIGZ1bmNzIHsKCQkJcmVzdWx0LCBlcnIgOj0gZy5SdW4oZm4sIG5vZGUpCgkJCWlmIGVyciAhPSBuaWwgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQkJcmVzdWx0cyA9IGFwcGVuZChyZXN1bHRzLCByZXN1bHQuLi4pCgkJfQoJCXJldHVybiByZXN1bHRzLCBuaWwKCX0KCXBrZ3MsIGVyciA6PSBsb2FkLkFyZ3MoZywgYXJncy4uLikKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImVycm9yIGxvYWRpbmcgcGFja2FnZXM6ICV2IiwgZXJyKQoJfQoJdmFyIHJlc3VsdHMgW11hc3QuTm9kZQoJZm9yIF8sIHBrZyA6PSByYW5nZSBwa2dzIHsKCQlnLkluZm8gPSBwa2cuVHlwZXNJbmZvCgkJbm9kZXMgOj0gbWFrZShbXWFzdC5Ob2RlLCBsZW4ocGtnLlN5bnRheCkpCgkJZm9yIGksIGYgOj0gcmFuZ2UgcGtnLlN5bnRheCB7CgkJCW5vZGVzW2ldID0gZgoJCX0KCQlmb3IgXywgZm4gOj0gcmFuZ2UgZnVuY3MgewoJCQlyZXN1bHQsIGVyciA6PSBnLlJ1bihmbiwgbm9kZXMuLi4pCgkJCWlmIGVyciAhPSBuaWwgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQkJcmVzdWx0cyA9IGFwcGVuZChyZXN1bHRzLCByZXN1bHQuLi4pCgkJfQoJfQoJcmV0dXJuIHJlc3VsdHMsIG5pbAp9Cg"},
	{"nls/api.go", ""},
	{"nls/match.go", ""},
	{"nls/parse.go", "Ly8gQ29weXJpZ2h0IChjKSAyMDE3LCBEYW5pZWwgTWFydMOtIDxtdmRhbkBtdmRhbi5jYz4KLy8gU2VlIExJQ0VOU0UgZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbgoKcGFja2FnZSBubHMKCmltcG9ydCAoCgkiYnl0ZXMiCgkiZm10IgoJImdvL2FzdCIKCSJnby9zY2FubmVyIgoJImdvL3Rva2VuIgoJInN0cmNvbnYiCgkic3RyaW5ncyIKCgkibXZkYW4uY2MvZ29ncmVwL2dzeW50YXgiCikKCmZ1bmMgKGcgKkcpIHRyYW5zZm9ybVNvdXJjZShleHByIHN0cmluZykgKHN0cmluZywgW11nc3ludGF4LlBvc09mZnNldCwgZXJyb3IpIHsKCXRva3MsIGVyciA6PSBnLnRva2VuaXplKFtdYnl0ZShleHByKSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiAiIiwgbmlsLCBmbXQuRXJyb3JmKCJjYW5ub3QgdG9rZW5pemUgZXhwcjogJXYiLCBlcnIpCgl9Cgl2YXIgb2ZmcyBbXWdzeW50YXguUG9zT2Zmc2V0CglsYnVmIDo9IGxpbmVDb2xCdWZmZXJ7bGluZTogMSwgY29sOiAxfQoJYWRkT2Zmc2V0IDo9IGZ1bmMobGVuZ3RoIGludCkgewoJCWxidWYub2ZmcyAtPSBsZW5ndGgKCQlvZmZzID0gYXBwZW5kKG9mZnMsIGdzeW50YXguUG9zT2Zmc2V0ewoJCQlBdExpbmU6IGxidWYubGluZSwKCQkJQXRDb2w6ICBsYnVmLmNvbCwKCQkJT2Zmc2V0OiBsZW5ndGgsCgkJfSkKCX0KCWlmIGxlbih0b2tzKSA+IDAgJiYgdG9rc1swXS50b2sgPT0gdG9rQWdncmVzc2l2ZSB7CgkJdG9rcyA9IHRva3NbMTpdCgkJZy5hZ2dyZXNzaXZlID0gdHJ1ZQoJfQoJbGFzdExpdCA6PSBmYWxzZQoJZm9yIF8sIHQgOj0gcmFuZ2UgdG9rcyB7CgkJaWYgbGJ1Zi5vZmZzID49IHQucG9zLk9mZnNldCAmJiBsYXN0TGl0ICYmIHQubGl0ICE9ICIiIHsKCQkJbGJ1Zi5Xcml0ZVN0cmluZygiICIpCgkJfQoJCWZvciBsYnVmLm9mZnMgPCB0LnBvcy5PZmZzZXQgewoJCQlsYnVmLldyaXRlU3RyaW5nKCIgIikKCQl9CgkJaWYgdC5saXQgPT0gIiIgewoJCQlsYnVmLldyaXRlU3RyaW5nKHQudG9rLlN0cmluZygpKQoJCQlsYXN0TGl0ID0gZmFsc2UKCQkJY29udGludWUKCQl9CgkJaWYgaXNXaWxkTmFtZSh0LmxpdCkgewoJCQkvLyB0byBjb3JyZWN0IHRoZSBwb3NpdGlvbiBvZmZzZXRzIGZvciB0aGUgZXh0cmEKCQkJLy8gaW5mbyBhdHRhY2hlZCB0byBpZGVudCBuYW1lIHN0cmluZ3MKCQkJYWRkT2Zmc2V0KGxlbih3aWxkUHJlZml4KSAtIDEpCgkJfQoJCWxidWYuV3JpdGVTdHJpbmcodC5saXQpCgkJbGFzdExpdCA9IHN0cmluZ3MuVHJpbVNwYWNlKHQubGl0KSAhPSAiIgoJfQoJLy8gdHJhaWxpbmcgbmV3bGluZXMgY2FuIGNhdXNlIGlzc3VlcyB3aXRoIGNvbW1hcwoJcmV0dXJuIHN0cmluZ3MuVHJpbVNwYWNlKGxidWYuU3RyaW5nKCkpLCBvZmZzLCBuaWwKfQoKZnVuYyAoZyAqRykgcGFyc2VFeHByKGV4cHIgc3RyaW5nKSAoYXN0Lk5vZGUsIGVycm9yKSB7CglleHByU3RyLCBvZmZzLCBlcnIgOj0gZy50cmFuc2Zvcm1Tb3VyY2UoZXhwcikKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoJbm9kZSwgXywgZXJyIDo9IGdzeW50YXguUGFyc2VBbnkoZy5Gc2V0LCBleHByU3RyKQoJaWYgZXJyICE9IG5pbCB7CgkJZXJyID0gZ3N5bnRheC5TdWJQb3NPZmZzZXRzKGVyciwgb2Zmcy4uLikKCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJjYW5ub3QgcGFyc2UgZXhwcjogJXYiLCBlcnIpCgl9CglyZXR1cm4gbm9kZSwgbmlsCn0KCnR5cGUgbGluZUNvbEJ1ZmZlciBzdHJ1Y3QgewoJYnl0ZXMuQnVmZmVyCglsaW5lLCBjb2wsIG9mZnMgaW50Cn0KCmZ1bmMgKGwgKmxpbmVDb2xCdWZmZXIpIFdyaXRlU3RyaW5nKHMgc3RyaW5nKSAobiBpbnQsIGVyciBlcnJvcikgewoJZm9yIF8sIHIgOj0gcmFuZ2UgcyB7CgkJaWYgciA9PSAnXG4nIHsKCQkJbC5saW5lKysKCQkJbC5jb2wgPSAxCgkJfSBlbHNlIHsKCQkJbC5jb2wrKwoJCX0KCQlsLm9mZnMrKwoJfQoJcmV0dXJuIGwuQnVmZmVyLldyaXRlU3RyaW5nKHMpCn0KCmNvbnN0ICgKCV8gdG9rZW4uVG9rZW4gPSAtaW90YQoJdG9rQWdncmVzc2l2ZQopCgp0eXBlIGZ1bGxUb2tlbiBzdHJ1Y3QgewoJcG9zIHRva2VuLlBvc2l0aW9uCgl0b2sgdG9rZW4uVG9rZW4KCWxpdCBzdHJpbmcKfQoKdHlwZSBjYXNlU3RhdHVzIHVpbnQKCmNvbnN0ICgKCWNhc2VOb25lIGNhc2VTdGF0dXMgPSBpb3RhCgljYXNlTmVlZEJsb2NrCgljYXNlSGVyZQopCgpmdW5jIChnICpHKSB0b2tlbml6ZShzcmMgW11ieXRlKSAoW11mdWxsVG9rZW4sIGVycm9yKSB7Cgl2YXIgcyBzY2FubmVyLlNjYW5uZXIKCWZzZXQgOj0gdG9rZW4uTmV3RmlsZVNldCgpCglmaWxlIDo9IGZzZXQuQWRkRmlsZSgiIiwgZnNldC5CYXNlKCksIGxlbihzcmMpKQoKCXZhciBlcnIgZXJyb3IKCW9uRXJyb3IgOj0gZnVuYyhwb3MgdG9rZW4uUG9zaXRpb24sIG1zZyBzdHJpbmcpIHsKCQlzd2l0Y2ggbXNnIHsgLy8gYWxsb3cgY2VydGFpbiBleHRyYSBjaGFycwoJCWNhc2UgYGlsbGVnYWwgY2hhcmFjdGVyIFUrMDAyNCAnJCdgOgoJCWNhc2UgYGlsbGVnYWwgY2hhcmFjdGVyIFUrMDA3RSAnfidgOgoJCWRlZmF1bHQ6CgkJCWVyciA9IGZtdC5FcnJvcmYoIiV2OiAlcyIsIHBvcywgbXNnKQoJCX0KCX0KCgkvLyB3ZSB3aWxsIG1vZGlmeSB0aGUgaW5wdXQgc291cmNlIHVuZGVyIHRoZSBzY2FubmVyJ3Mgbm9zZSB0bwoJLy8gZW5hYmxlIHNvbWUgZmVhdHVyZXMgc3VjaCBhcyByZWdleGVzLgoJcy5Jbml0KGZpbGUsIHNyYywgb25FcnJvciwgc2Nhbm5lci5TY2FuQ29tbWVudHMpCgoJbmV4dCA6PSBmdW5jKCkgZnVsbFRva2VuIHsKCQlwb3MsIHRvaywgbGl0IDo9IHMuU2NhbigpCgkJcmV0dXJuIGZ1bGxUb2tlbntmc2V0LlBvc2l0aW9uKHBvcyksIHRvaywgbGl0fQoJfQoKCWNhc2VTdGF0IDo9IGNhc2VOb25lCgoJdmFyIHRva3MgW11mdWxsVG9rZW4KCWZvciB0IDo9IG5leHQoKTsgdC50b2sgIT0gdG9rZW4uRU9GOyB0ID0gbmV4dCgpIHsKCQlzd2l0Y2ggdC5saXQgewoJCWNhc2UgIiQiOiAvLyBjb250aW51ZXMgYmVsb3cKCQljYXNlICJ+IjoKCQkJdG9rcyA9IGFwcGVuZCh0b2tzLCBmdWxsVG9rZW57dC5wb3MsIHRva0FnZ3Jlc3NpdmUsICIifSkKCQkJY29udGludWUKCQljYXNlICJzd2l0Y2giLCAic2VsZWN0IiwgImNhc2UiOgoJCQlpZiB0LmxpdCA9PSAiY2FzZSIgewoJCQkJY2FzZVN0YXQgPSBjYXNlTm9uZQoJCQl9IGVsc2UgewoJCQkJY2FzZVN0YXQgPSBjYXNlTmVlZEJsb2NrCgkJCX0KCQkJZmFsbHRocm91Z2gKCQlkZWZhdWx0OiAvLyByZWd1bGFyIEdvIGNvZGUKCQkJaWYgdC50b2sgPT0gdG9rZW4uTEJSQUNFICYmIGNhc2VTdGF0ID09IGNhc2VOZWVkQmxvY2sgewoJCQkJY2FzZVN0YXQgPSBjYXNlSGVyZQoJCQl9CgkJCXRva3MgPSBhcHBlbmQodG9rcywgdCkKCQkJY29udGludWUKCQl9CgkJd3QsIGVyciA6PSBnLndpbGRjYXJkKHQucG9zLCBuZXh0KQoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9CgkJaWYgY2FzZVN0YXQgPT0gY2FzZUhlcmUgewoJCQl0b2tzID0gYXBwZW5kKHRva3MsIGZ1bGxUb2tlbnt3dC5wb3MsIHRva2VuLklERU5ULCAiY2FzZSJ9KQoJCX0KCQl0b2tzID0gYXBwZW5kKHRva3MsIHd0KQoJCWlmIGNhc2VTdGF0ID09IGNhc2VIZXJlIHsKCQkJdG9rcyA9IGFwcGVuZCh0b2tzLCBmdWxsVG9rZW57d3QucG9zLCB0b2tlbi5DT0xPTiwgIiJ9KQoJCQl0b2tzID0gYXBwZW5kKHRva3MsIGZ1bGxUb2tlbnt3dC5wb3MsIHRva2VuLklERU5ULCAiZ29ncmVwX2JvZHkifSkKCQl9Cgl9CglyZXR1cm4gdG9rcywgZXJyCn0KCmZ1bmMgKGcgKkcpIHdpbGRjYXJkKHBvcyB0b2tlbi5Qb3NpdGlvbiwgbmV4dCBmdW5jKCkgZnVsbFRva2VuKSAoZnVsbFRva2VuLCBlcnJvcikgewoJd3QgOj0gZnVsbFRva2Vue3BvcywgdG9rZW4uSURFTlQsIHdpbGRQcmVmaXh9Cgl0IDo9IG5leHQoKQoJdmFyIGluZm8gdmFySW5mbwoJaWYgdC50b2sgPT0gdG9rZW4uTVVMIHsKCQl0ID0gbmV4dCgpCgkJaW5mby5hbnkgPSB0cnVlCgl9CglpZiB0LnRvayAhPSB0b2tlbi5JREVOVCB7CgkJcmV0dXJuIHd0LCBmbXQuRXJyb3JmKCIldjogJCBtdXN0IGJlIGZvbGxvd2VkIGJ5IGlkZW50LCBnb3QgJXYiLAoJCQl0LnBvcywgdC50b2spCgl9CglpZCA6PSBsZW4oZy52YXJzKQoJd3QubGl0ICs9IHN0cmNvbnYuSXRvYShpZCkKCWluZm8ubmFtZSA9IHQubGl0CglnLnZhcnMgPSBhcHBlbmQoZy52YXJzLCBpbmZvKQoJcmV0dXJuIHd0LCBuaWwKfQoKLy8gdXNpbmcgYSBwcmVmaXggaXMgZ29vZCBlbm91Z2ggZm9yIG5vdwpjb25zdCB3aWxkUHJlZml4ID0gImdvZ3JlcF8iCgpmdW5jIGlzV2lsZE5hbWUobmFtZSBzdHJpbmcpIGJvb2wgewoJcmV0dXJuIHN0cmluZ3MuSGFzUHJlZml4KG5hbWUsIHdpbGRQcmVmaXgpCn0KCmZ1bmMgZnJvbVdpbGROYW1lKHMgc3RyaW5nKSBpbnQgewoJaWYgIWlzV2lsZE5hbWUocykgewoJCXJldHVybiAtMQoJfQoJbiwgZXJyIDo9IHN0cmNvbnYuQXRvaShzW2xlbih3aWxkUHJlZml4KTpdKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIC0xCgl9CglyZXR1cm4gbgp9Cg"},
	{"nls/subst.go", "Ly8gQ29weXJpZ2h0IChjKSAyMDE4LCBEYW5pZWwgTWFydMOtIDxtdmRhbkBtdmRhbi5jYz4KLy8gU2VlIExJQ0VOU0UgZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbgoKcGFja2FnZSBubHMKCmltcG9ydCAoCgkiZm10IgoJImdvL2FzdCIKCSJnby90b2tlbiIKCSJyZWZsZWN0IgoKCSJtdmRhbi5jYy9nb2dyZXAvZ3N5bnRheCIKKQoKZnVuYyAoZyAqRykgU3Vic3RpdHV0ZShleHByIHN0cmluZykgewoJZm9yIGkgOj0gcmFuZ2UgZy5DdXJyZW50IHsKCQlzdWIgOj0gJmcuQ3VycmVudFtpXQoJCW5vZGVDb3B5LCBfIDo9IGcucGFyc2VFeHByKGV4cHIpCgkJLy8gc2luY2Ugd2UnbGwgd2FudCB0byBzZXQgcG9zaXRpb25zIHdpdGhpbiB0aGUgZmlsZSdzCgkJLy8gRmlsZVNldAoJCXNjcnViUG9zaXRpb25zKG5vZGVDb3B5KQoKCQlnLmZpbGxQYXJlbnRzKG5vZGVDb3B5KQoJCW5vZGVDb3B5ID0gZy5maWxsVmFsdWVzKG5vZGVDb3B5LCBzdWIuVmFsdWVzKQoJCWcuc3Vic3ROb2RlKHN1Yi5Ob2RlLCBub2RlQ29weSkKCQlzdWIuTm9kZSA9IG5vZGVDb3B5Cgl9Cn0KCnR5cGUgdG9wTm9kZSBzdHJ1Y3QgewoJTm9kZSBhc3QuTm9kZQp9CgpmdW5jICh0IHRvcE5vZGUpIFBvcygpIHRva2VuLlBvcyB7IHJldHVybiB0Lk5vZGUuUG9zKCkgfQpmdW5jICh0IHRvcE5vZGUpIEVuZCgpIHRva2VuLlBvcyB7IHJldHVybiB0Lk5vZGUuRW5kKCkgfQoKZnVuYyAoZyAqRykgZmlsbFZhbHVlcyhub2RlIGFzdC5Ob2RlLCB2YWx1ZXMgbWFwW3N0cmluZ11hc3QuTm9kZSkgYXN0Lk5vZGUgewoJLy8gbm9kZSBtaWdodCBub3QgaGF2ZSBhIHBhcmVudCwgaW4gd2hpY2ggY2FzZSB3ZSBuZWVkIHRvIHNldCBhbgoJLy8gYXJ0aWZpY2lhbCBvbmUuIEl0cyBwb2ludGVyIGludGVyZmFjZSBpcyBhIGNvcHksIHNvIHdlIG11c3QgYWxzbwoJLy8gcmV0dXJuIGl0LgoJdG9wIDo9ICZ0b3BOb2Rle25vZGV9CglnLnNldFBhcmVudE9mKG5vZGUsIHRvcCkKCglnc3ludGF4Lkluc3BlY3Qobm9kZSwgZnVuYyhub2RlIGFzdC5Ob2RlKSBib29sIHsKCQlpZCA6PSBmcm9tV2lsZE5vZGUobm9kZSkKCQlpbmZvIDo9IGcuaW5mbyhpZCkKCQlpZiBpbmZvLm5hbWUgPT0gIiIgewoJCQlyZXR1cm4gdHJ1ZQoJCX0KCQlwcmV2IDo9IHZhbHVlc1tpbmZvLm5hbWVdCgkJc3dpdGNoIHByZXYuKHR5cGUpIHsKCQljYXNlIGdzeW50YXguRXhwckxpc3Q6CgkJCW5vZGUgPSBnc3ludGF4LkV4cHJMaXN0KFtdYXN0LkV4cHJ7CgkJCQlub2RlLigqYXN0LklkZW50KSwKCQkJfSkKCQljYXNlIGdzeW50YXguU3RtdExpc3Q6CgkJCWlmIGlkZW50LCBvayA6PSBub2RlLigqYXN0LklkZW50KTsgb2sgewoJCQkJbm9kZSA9ICZhc3QuRXhwclN0bXR7WDogaWRlbnR9CgkJCX0KCQkJbm9kZSA9IGdzeW50YXguU3RtdExpc3QoW11hc3QuU3RtdHsKCQkJCW5vZGUuKCphc3QuRXhwclN0bXQpLAoJCQl9KQoJCX0KCQlnLnN1YnN0Tm9kZShub2RlLCBwcmV2KQoJCXJldHVybiB0cnVlCgl9KQoJZy5zZXRQYXJlbnRPZihub2RlLCBuaWwpCglyZXR1cm4gdG9wLk5vZGUKfQoKZnVuYyAoZyAqRykgc3Vic3ROb2RlKG9sZE5vZGUsIG5ld05vZGUgYXN0Lk5vZGUpIHsKCXBhcmVudCA6PSBnLnBhcmVudE9mKG9sZE5vZGUpCglnLnNldFBhcmVudE9mKG5ld05vZGUsIHBhcmVudCkKCglwdHIgOj0gZy5ub2RlUHRyKG9sZE5vZGUpCglzd2l0Y2ggeCA6PSBwdHIuKHR5cGUpIHsKCWNhc2UgKiphc3QuSWRlbnQ6CgkJKnggPSBuZXdOb2RlLigqYXN0LklkZW50KQoJY2FzZSAqYXN0Lk5vZGU6CgkJKnggPSBuZXdOb2RlCgljYXNlICphc3QuRXhwcjoKCQkqeCA9IG5ld05vZGUuKGFzdC5FeHByKQoJY2FzZSAqYXN0LlN0bXQ6CgkJc3dpdGNoIHkgOj0gbmV3Tm9kZS4odHlwZSkgewoJCWNhc2UgYXN0LkV4cHI6CgkJCXN0bXQgOj0gJmFzdC5FeHByU3RtdHtYOiB5fQoJCQlnLnNldFBhcmVudE9mKHN0bXQsIHBhcmVudCkKCQkJKnggPSBzdG10CgkJY2FzZSBhc3QuU3RtdDoKCQkJKnggPSB5CgkJZGVmYXVsdDoKCQkJcGFuaWMoZm10LlNwcmludGYoImNhbm5vdCByZXBsYWNlIHN0bXQgd2l0aCAlVCIsIHkpKQoJCX0KCWNhc2UgKltdYXN0LkV4cHI6CgkJb2xkTGlzdCA6PSBvbGROb2RlLihnc3ludGF4LkV4cHJMaXN0KQoJCXZhciBmaXJzdCwgbGFzdCBbXWFzdC5FeHByCgkJZm9yIGksIGV4cHIgOj0gcmFuZ2UgKnggewoJCQlpZiBleHByID09IG9sZExpc3RbMF0gewoJCQkJZmlyc3QgPSAoKngpWzppXQoJCQkJbGFzdCA9ICgqeClbaStsZW4ob2xkTGlzdCk6XQoJCQkJYnJlYWsKCQkJfQoJCX0KCQlzd2l0Y2ggeSA6PSBuZXdOb2RlLih0eXBlKSB7CgkJY2FzZSBhc3QuRXhwcjoKCQkJKnggPSBhcHBlbmQoZmlyc3QsIHkpCgkJY2FzZSBnc3ludGF4LkV4cHJMaXN0OgoJCQkqeCA9IGFwcGVuZChmaXJzdCwgeS4uLikKCQlkZWZhdWx0OgoJCQlwYW5pYyhmbXQuU3ByaW50ZigiY2Fubm90IHJlcGxhY2UgZXhwcnMgd2l0aCAlVCIsIHkpKQoJCX0KCQkqeCA9IGFwcGVuZCgqeCwgbGFzdC4uLikKCWNhc2UgKltdYXN0LlN0bXQ6CgkJb2xkTGlzdCA6PSBvbGROb2RlLihnc3ludGF4LlN0bXRMaXN0KQoJCXZhciBmaXJzdCwgbGFzdCBbXWFzdC5TdG10CgkJZm9yIGksIHN0bXQgOj0gcmFuZ2UgKnggewoJCQlpZiBzdG10ID09IG9sZExpc3RbMF0gewoJCQkJZmlyc3QgPSAoKngpWzppXQoJCQkJbGFzdCA9ICgqeClbaStsZW4ob2xkTGlzdCk6XQoJCQkJYnJlYWsKCQkJfQoJCX0KCQlzd2l0Y2ggeSA6PSBuZXdOb2RlLih0eXBlKSB7CgkJY2FzZSBhc3QuRXhwcjoKCQkJc3RtdCA6PSAmYXN0LkV4cHJTdG10e1g6IHl9CgkJCWcuc2V0UGFyZW50T2Yoc3RtdCwgcGFyZW50KQoJCQkqeCA9IGFwcGVuZChmaXJzdCwgc3RtdCkKCQljYXNlIGFzdC5TdG10OgoJCQkqeCA9IGFwcGVuZChmaXJzdCwgeSkKCQljYXNlIGdzeW50YXguU3RtdExpc3Q6CgkJCSp4ID0gYXBwZW5kKGZpcnN0LCB5Li4uKQoJCWRlZmF1bHQ6CgkJCXBhbmljKGZtdC5TcHJpbnRmKCJjYW5ub3QgcmVwbGFjZSBzdG10cyB3aXRoICVUIiwgeSkpCgkJfQoJCSp4ID0gYXBwZW5kKCp4LCBsYXN0Li4uKQoJY2FzZSBuaWw6CgkJcmV0dXJuCglkZWZhdWx0OgoJCXBhbmljKGZtdC5TcHJpbnRmKCJ1bnN1cHBvcnRlZCBzdWJzdGl0dXRpb246ICVUIiwgeCkpCgl9CgkvLyB0aGUgbmV3IG5vZGVzIGhhdmUgc2NydWJiZWQgcG9zaXRpb25zLCBzbyB0cnkgb3VyIGJlc3QgdG8gdXNlCgkvLyBzZW5zaWJsZSBvbmVzCglmaXhQb3NpdGlvbnMocGFyZW50KQp9CgpmdW5jIChnICpHKSBwYXJlbnRPZihub2RlIGFzdC5Ob2RlKSBhc3QuTm9kZSB7CglsaXN0LCBvayA6PSBub2RlLihnc3ludGF4Lk5vZGVMaXN0KQoJaWYgb2sgewoJCW5vZGUgPSBsaXN0LkF0KDApCgl9CglyZXR1cm4gZy5wYXJlbnRzW25vZGVdCn0KCmZ1bmMgKGcgKkcpIHNldFBhcmVudE9mKG5vZGUsIHBhcmVudCBhc3QuTm9kZSkgewoJbGlzdCwgb2sgOj0gbm9kZS4oZ3N5bnRheC5Ob2RlTGlzdCkKCWlmIG9rIHsKCQlpZiBsaXN0LkxlbigpID09IDAgewoJCQlyZXR1cm4KCQl9CgkJbm9kZSA9IGxpc3QuQXQoMCkKCX0KCWcucGFyZW50c1tub2RlXSA9IHBhcmVudAp9CgpmdW5jIChnICpHKSBub2RlUHRyKG5vZGUgYXN0Lk5vZGUpIGludGVyZmFjZXt9IHsKCWxpc3QsIHdhbnRTbGljZSA6PSBub2RlLihnc3ludGF4Lk5vZGVMaXN0KQoJaWYgd2FudFNsaWNlIHsKCQlub2RlID0gbGlzdC5BdCgwKQoJfQoJcGFyZW50IDo9IGcucGFyZW50T2Yobm9kZSkKCWlmIHBhcmVudCA9PSBuaWwgewoJCXJldHVybiBuaWwKCX0KCXYgOj0gcmVmbGVjdC5WYWx1ZU9mKHBhcmVudCkuRWxlbSgpCglmb3IgaSA6PSAwOyBpIDwgdi5OdW1GaWVsZCgpOyBpKysgewoJCWZsZCA6PSB2LkZpZWxkKGkpCgkJc3dpdGNoIGZsZC5UeXBlKCkuS2luZCgpIHsKCQljYXNlIHJlZmxlY3QuU2xpY2U6CgkJCWZvciBpIDo9IDA7IGkgPCBmbGQuTGVuKCk7IGkrKyB7CgkJCQlpZmxkIDo9IGZsZC5JbmRleChpKQoJCQkJaWYgaWZsZC5JbnRlcmZhY2UoKSAhPSBub2RlIHsKCQkJCQljb250aW51ZQoJCQkJfQoJCQkJaWYgd2FudFNsaWNlIHsKCQkJCQlyZXR1cm4gZmxkLkFkZHIoKS5JbnRlcmZhY2UoKQoJCQkJfQoJCQkJcmV0dXJuIGlmbGQuQWRkcigpLkludGVyZmFjZSgpCgkJCX0KCQljYXNlIHJlZmxlY3QuSW50ZXJmYWNlOgoJCQlpZiBmbGQuSW50ZXJmYWNlKCkgPT0gbm9kZSB7CgkJCQlyZXR1cm4gZmxkLkFkZHIoKS5JbnRlcmZhY2UoKQoJCQl9CgkJfQoJfQoJcmV0dXJuIG5pbAp9CgovLyBub2RlUG9zSGFzaCBpcyBhbiBhc3QuTm9kZSB0aGF0IGNhbiBhbHdheXMgYmUgdXNlZCBhcyBhIGtleSBpbiBtYXBzLAovLyBldmVuIGZvciBub2RlcyB0aGF0IGFyZSBzbGljZXMgbGlrZSBOb2RlTGlzdC4KdHlwZSBub2RlUG9zSGFzaCBzdHJ1Y3QgewoJcG9zLCBlbmQgdG9rZW4uUG9zCn0KCmZ1bmMgKG4gbm9kZVBvc0hhc2gpIFBvcygpIHRva2VuLlBvcyB7IHJldHVybiBuLnBvcyB9CmZ1bmMgKG4gbm9kZVBvc0hhc2gpIEVuZCgpIHRva2VuLlBvcyB7IHJldHVybiBuLmVuZCB9CgpmdW5jIHBvc0hhc2gobm9kZSBhc3QuTm9kZSkgbm9kZVBvc0hhc2ggewoJcmV0dXJuIG5vZGVQb3NIYXNoe3Bvczogbm9kZS5Qb3MoKSwgZW5kOiBub2RlLkVuZCgpfQp9Cgp2YXIgcG9zVHlwZSA9IHJlZmxlY3QuVHlwZU9mKHRva2VuLk5vUG9zKQoKZnVuYyBzY3J1YlBvc2l0aW9ucyhub2RlIGFzdC5Ob2RlKSB7Cglnc3ludGF4Lkluc3BlY3Qobm9kZSwgZnVuYyhub2RlIGFzdC5Ob2RlKSBib29sIHsKCQl2IDo9IHJlZmxlY3QuVmFsdWVPZihub2RlKQoJCWlmIHYuS2luZCgpICE9IHJlZmxlY3QuUHRyIHsKCQkJcmV0dXJuIHRydWUKCQl9CgkJdiA9IHYuRWxlbSgpCgkJaWYgdi5LaW5kKCkgIT0gcmVmbGVjdC5TdHJ1Y3QgewoJCQlyZXR1cm4gdHJ1ZQoJCX0KCQlmb3IgaSA6PSAwOyBpIDwgdi5OdW1GaWVsZCgpOyBpKysgewoJCQlmbGQgOj0gdi5GaWVsZChpKQoJCQlpZiBmbGQuVHlwZSgpID09IHBvc1R5cGUgewoJCQkJZmxkLlNldEludCgwKQoJCQl9CgkJfQoJCXJldHVybiB0cnVlCgl9KQp9CgovLyBmaXhQb3NpdGlvbnMgdHJpZXMgdG8gZml4IGNvbW1vbiBzeW50YXggZXJyb3JzIGNhdXNlZCBmcm9tIHN5bnRheCByZXdyaXRlcy4KZnVuYyBmaXhQb3NpdGlvbnMobm9kZSBhc3QuTm9kZSkgewoJaWYgdG9wLCBvayA6PSBub2RlLigqdG9wTm9kZSk7IG9rIHsKCQlub2RlID0gdG9wLk5vZGUKCX0KCS8vIGZhbGxiYWNrIHNldHMgcG9zIHRvIHRoZSAndG8nIHBvc2l0aW9uIGlmIG5vdCB2YWxpZC4KCWZhbGxiYWNrIDo9IGZ1bmMocG9zICp0b2tlbi5Qb3MsIHRvIHRva2VuLlBvcykgewoJCWlmICFwb3MuSXNWYWxpZCgpIHsKCQkJKnBvcyA9IHRvCgkJfQoJfQoJYXN0Lkluc3BlY3Qobm9kZSwgZnVuYyhub2RlIGFzdC5Ob2RlKSBib29sIHsKCQkvLyBUT0RPOiBtYW55IG1vcmUgbm9kZSB0eXBlcwoJCXN3aXRjaCB4IDo9IG5vZGUuKHR5cGUpIHsKCQljYXNlICphc3QuR29TdG10OgoJCQlmYWxsYmFjaygmeC5HbywgeC5DYWxsLlBvcygpKQoJCWNhc2UgKmFzdC5SZXR1cm5TdG10OgoJCQlpZiBsZW4oeC5SZXN1bHRzKSA9PSAwIHsKCQkJCWJyZWFrCgkJCX0KCQkJLy8gRW5zdXJlIHRoYXQgdGhlcmUncyBubyBuZXdsaW5lIGJlZm9yZSB0aGUgcmV0dXJuZWQKCQkJLy8gdmFsdWVzLCBhcyBvdGhlcndpc2Ugd2UgaGF2ZSBhIG5ha2VkIHJldHVybi4gU2VlCgkJCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vaXNzdWVzLzMyODU0LgoJCQlpZiBwb3MgOj0geC5SZXN1bHRzWzBdLlBvcygpOyBwb3MgPiB4LlJldHVybiB7CgkJCQl4LlJldHVybiA9IHBvcwoJCQl9CgkJfQoJCXJldHVybiB0cnVlCgl9KQp9Cg"},
	{"nls/write.go", "Ly8gQ29weXJpZ2h0IChjKSAyMDE4LCBEYW5pZWwgTWFydMOtIDxtdmRhbkBtdmRhbi5jYz4KLy8gU2VlIExJQ0VOU0UgZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbgoKcGFja2FnZSBubHMKCmltcG9ydCAoCgkiZ28vYXN0IgoJImdvL3ByaW50ZXIiCgkib3MiCgoJIm12ZGFuLmNjL2dvZ3JlcC9nc3ludGF4IgopCgpmdW5jIChnICpHKSBXcml0ZSgpIHsKCXNlZW5Sb290IDo9IG1ha2UobWFwW25vZGVQb3NIYXNoXWJvb2wpCglmaWxlUGF0aHMgOj0gbWFrZShtYXBbKmFzdC5GaWxlXXN0cmluZykKCXZhciBuZXh0IFtdTWF0Y2gKCWZvciBfLCBzdWIgOj0gcmFuZ2UgZy5DdXJyZW50IHsKCQlyb290IDo9IGcubm9kZVJvb3Qoc3ViLk5vZGUpCgkJaGFzaCA6PSBwb3NIYXNoKHJvb3QpCgkJaWYgc2VlblJvb3RbaGFzaF0gewoJCQljb250aW51ZSAvLyBhdm9pZCBkdXBzCgkJfQoJCXNlZW5Sb290W2hhc2hdID0gdHJ1ZQoJCWZpbGUsIG9rIDo9IHJvb3QuKCphc3QuRmlsZSkKCQlpZiBvayB7CgkJCXBhdGggOj0gZy5Gc2V0LlBvc2l0aW9uKGZpbGUuUGFja2FnZSkuRmlsZW5hbWUKCQkJaWYgcGF0aCAhPSAiIiB7CgkJCQkvLyB3cml0ZSB0byBkaXNrCgkJCQlmaWxlUGF0aHNbZmlsZV0gPSBwYXRoCgkJCQljb250aW51ZQoJCQl9CgkJfQoJCS8vIHBhc3MgaXQgb24sIHRvIHByaW50IHRvIHN0ZG91dAoJCW5leHQgPSBhcHBlbmQobmV4dCwgTWF0Y2h7Tm9kZTogcm9vdH0pCgl9Cglmb3IgZmlsZSwgcGF0aCA6PSByYW5nZSBmaWxlUGF0aHMgewoJCWYsIGVyciA6PSBvcy5PcGVuRmlsZShwYXRoLCBvcy5PX1dST05MWXxvcy5PX1RSVU5DLCAwKQoJCWlmIGVyciAhPSBuaWwgewoJCQkvLyBUT0RPOiByZXR1cm4gZXJyb3JzIGluc3RlYWQKCQkJcGFuaWMoZXJyKQoJCX0KCQlpZiBlcnIgOj0gcHJpbnRDb25maWcuRnByaW50KGYsIGcuRnNldCwgZmlsZSk7IGVyciAhPSBuaWwgewoJCQkvLyBUT0RPOiByZXR1cm4gZXJyb3JzIGluc3RlYWQKCQkJcGFuaWMoZXJyKQoJCX0KCX0KCWcuQ3VycmVudCA9IG5leHQKfQoKdmFyIHByaW50Q29uZmlnID0gcHJpbnRlci5Db25maWd7CglNb2RlOiAgICAgcHJpbnRlci5Vc2VTcGFjZXMgfCBwcmludGVyLlRhYkluZGVudCwKCVRhYndpZHRoOiA4LAp9CgpmdW5jIChnICpHKSBub2RlUm9vdChub2RlIGFzdC5Ob2RlKSBhc3QuTm9kZSB7CglwYXJlbnQgOj0gZy5wYXJlbnRPZihub2RlKQoJaWYgcGFyZW50ID09IG5pbCB7CgkJcmV0dXJuIG5vZGUKCX0KCWlmIF8sIG9rIDo9IHBhcmVudC4oZ3N5bnRheC5Ob2RlTGlzdCk7IG9rIHsKCQlyZXR1cm4gcGFyZW50Cgl9CglyZXR1cm4gZy5ub2RlUm9vdChwYXJlbnQpCn0K"},
	{"gsyntax/parse.go", "Ly8gQ29weXJpZ2h0IChjKSAyMDE5LCBEYW5pZWwgTWFydMOtIDxtdmRhbkBtdmRhbi5jYz4KLy8gU2VlIExJQ0VOU0UgZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbgoKcGFja2FnZSBnc3ludGF4CgppbXBvcnQgKAoJImJ5dGVzIgoJImZtdCIKCSJnby9hc3QiCgkiZ28vcGFyc2VyIgoJImdvL3NjYW5uZXIiCgkiZ28vdG9rZW4iCgkidGV4dC90ZW1wbGF0ZSIKKQoKdmFyIHRtcGxEZWNsID0gdGVtcGxhdGUuTXVzdCh0ZW1wbGF0ZS5OZXcoIiIpLlBhcnNlKGBgICsKCWBwYWNrYWdlIHA7IHt7IC4gfX1gKSkKCnZhciB0bXBsQmxvY2sgPSB0ZW1wbGF0ZS5NdXN0KHRlbXBsYXRlLk5ldygiIikuUGFyc2UoYGAgKwoJYHBhY2thZ2UgcDsgZnVuYyBfKCkgeyBpZiB0cnVlIHt7IC4gfX0gZWxzZSB7fSB9YCkpCgp2YXIgdG1wbEV4cHJzID0gdGVtcGxhdGUuTXVzdCh0ZW1wbGF0ZS5OZXcoIiIpLlBhcnNlKGBgICsKCWBwYWNrYWdlIHA7IHZhciBfID0gW11pbnRlcmZhY2V7fXsge3sgLiB9fSwgfWApKQoKdmFyIHRtcGxTdG10cyA9IHRlbXBsYXRlLk11c3QodGVtcGxhdGUuTmV3KCIiKS5QYXJzZShgYCArCglgcGFja2FnZSBwOyBmdW5jIF8oKSB7IHt7IC4gfX0gfWApKQoKdmFyIHRtcGxUeXBlID0gdGVtcGxhdGUuTXVzdCh0ZW1wbGF0ZS5OZXcoIiIpLlBhcnNlKGBgICsKCWBwYWNrYWdlIHA7IHZhciBfIHt7IC4gfX1gKSkKCnZhciB0bXBsVmFsU3BlYyA9IHRlbXBsYXRlLk11c3QodGVtcGxhdGUuTmV3KCIiKS5QYXJzZShgYCArCglgcGFja2FnZSBwOyB2YXIge3sgLiB9fWApKQoKZnVuYyBleGVjVG1wbCh0bXBsICp0ZW1wbGF0ZS5UZW1wbGF0ZSwgc3JjIHN0cmluZykgc3RyaW5nIHsKCXZhciBidWYgYnl0ZXMuQnVmZmVyCglpZiBlcnIgOj0gdG1wbC5FeGVjdXRlKCZidWYsIHNyYyk7IGVyciAhPSBuaWwgewoJCXBhbmljKGVycikKCX0KCXJldHVybiBidWYuU3RyaW5nKCkKfQoKZnVuYyBub0JhZE5vZGVzKG5vZGUgYXN0Lk5vZGUpIGJvb2wgewoJYW55IDo9IGZhbHNlCglhc3QuSW5zcGVjdChub2RlLCBmdW5jKG4gYXN0Lk5vZGUpIGJvb2wgewoJCWlmIGFueSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCQlzd2l0Y2ggbi4odHlwZSkgewoJCWNhc2UgKmFzdC5CYWRFeHByLCAqYXN0LkJhZERlY2w6CgkJCWFueSA9IHRydWUKCQl9CgkJcmV0dXJuIHRydWUKCX0pCglyZXR1cm4gIWFueQp9CgpmdW5jIFBhcnNlVHlwZShmc2V0ICp0b2tlbi5GaWxlU2V0LCBzcmMgc3RyaW5nKSAoYXN0LkV4cHIsICphc3QuRmlsZSwgZXJyb3IpIHsKCWFzVHlwZSA6PSBleGVjVG1wbCh0bXBsVHlwZSwgc3JjKQoJZiwgZXJyIDo9IHBhcnNlci5QYXJzZUZpbGUoZnNldCwgIiIsIGFzVHlwZSwgMCkKCWlmIGVyciAhPSBuaWwgewoJCWVyciA9IFN1YlBvc09mZnNldHMoZXJyLCBQb3NPZmZzZXR7MSwgMSwgMTd9KQoJCXJldHVybiBuaWwsIG5pbCwgZXJyCgl9Cgl2cyA6PSBmLkRlY2xzWzBdLigqYXN0LkdlbkRlY2wpLlNwZWNzWzBdLigqYXN0LlZhbHVlU3BlYykKCXJldHVybiB2cy5UeXBlLCBmLCBuaWwKfQoKLy8gUGFyc2VBbnkgdHJpZXMgaXRzIGJlc3QgdG8gcGFyc2UgdGhlIGFzdC5Ob2RlIGNvbnRhaW5lZCBpbiBzcmMsIGFzCi8vIG9uZSBvZjogKmFzdC5GaWxlLCBhc3QuRGVjbCwgYXN0LkV4cHIsIGFzdC5TdG10LCAqYXN0LlZhbHVlU3BlYy4KLy8gSXQgYWxzbyByZXR1cm5zIHRoZSAqYXN0LkZpbGUgdXNlZCBmb3IgdGhlIHBhcnNpbmcsIHNvIHRoYXQgdGhlIHJldHVybmVkIG5vZGUKLy8gY2FuIGJlIGVhc2lseSB0eXBlLWNoZWNrZWQuCmZ1bmMgUGFyc2VBbnkoZnNldCAqdG9rZW4uRmlsZVNldCwgc3JjIHN0cmluZykgKGFzdC5Ob2RlLCAqYXN0LkZpbGUsIGVycm9yKSB7CglmaWxlIDo9IGZzZXQuQWRkRmlsZSgiIiwgZnNldC5CYXNlKCksIGxlbihzcmMpKQoJc2NhbiA6PSBzY2FubmVyLlNjYW5uZXJ7fQoJc2Nhbi5Jbml0KGZpbGUsIFtdYnl0ZShzcmMpLCBuaWwsIDApCglpZiBfLCB0b2ssIF8gOj0gc2Nhbi5TY2FuKCk7IHRvayA9PSB0b2tlbi5FT0YgewoJCXJldHVybiBuaWwsIG5pbCwgZm10LkVycm9yZigiZW1wdHkgc291cmNlIGNvZGUiKQoJfQoJdmFyIG1haW5FcnIgZXJyb3IKCgkvLyBmaXJzdCB0cnkgYXMgYSB3aG9sZSBmaWxlCglpZiBmLCBlcnIgOj0gcGFyc2VyLlBhcnNlRmlsZShmc2V0LCAiIiwgc3JjLCAwKTsgZXJyID09IG5pbCAmJiBub0JhZE5vZGVzKGYpIHsKCQlyZXR1cm4gZiwgZiwgbmlsCgl9CgoJLy8gdGhlbiBhcyBhIHNpbmdsZSBkZWNsYXJhdGlvbiwgb3IgbWFueQoJYXNEZWNsIDo9IGV4ZWNUbXBsKHRtcGxEZWNsLCBzcmMpCglpZiBmLCBlcnIgOj0gcGFyc2VyLlBhcnNlRmlsZShmc2V0LCAiIiwgYXNEZWNsLCAwKTsgZXJyID09IG5pbCAmJiBub0JhZE5vZGVzKGYpIHsKCQlpZiBsZW4oZi5EZWNscykgPT0gMSB7CgkJCXJldHVybiBmLkRlY2xzWzBdLCBmLCBuaWwKCQl9CgkJcmV0dXJuIGYsIGYsIG5pbAoJfQoKCS8vIHRoZW4gYXMgYSBibG9jazsgb3RoZXJ3aXNlIGJsb2NrcyBtaWdodCBiZSBtaXN0YWtlbiBmb3IgY29tcG9zaXRlCgkvLyBsaXRlcmFscyBmdXJ0aGVyIGJlbG93Cglhc0Jsb2NrIDo9IGV4ZWNUbXBsKHRtcGxCbG9jaywgc3JjKQoJaWYgZiwgZXJyIDo9IHBhcnNlci5QYXJzZUZpbGUoZnNldCwgIiIsIGFzQmxvY2ssIDApOyBlcnIgPT0gbmlsICYmIG5vQmFkTm9kZXMoZikgewoJCWJsIDo9IGYuRGVjbHNbMF0uKCphc3QuRnVuY0RlY2wpLkJvZHkKCQlpZiBsZW4oYmwuTGlzdCkgPT0gMSB7CgkJCWlmcyA6PSBibC5MaXN0WzBdLigqYXN0LklmU3RtdCkKCQkJcmV0dXJuIGlmcy5Cb2R5LCBmLCBuaWwKCQl9Cgl9CgoJLy8gdGhlbiBhcyB2YWx1ZSBleHByZXNzaW9ucwoJYXNFeHBycyA6PSBleGVjVG1wbCh0bXBsRXhwcnMsIHNyYykKCWlmIGYsIGVyciA6PSBwYXJzZXIuUGFyc2VGaWxlKGZzZXQsICIiLCBhc0V4cHJzLCAwKTsgZXJyID09IG5pbCAmJiBub0JhZE5vZGVzKGYpIHsKCQl2cyA6PSBmLkRlY2xzWzBdLigqYXN0LkdlbkRlY2wpLlNwZWNzWzBdLigqYXN0LlZhbHVlU3BlYykKCQljbCA6PSB2cy5WYWx1ZXNbMF0uKCphc3QuQ29tcG9zaXRlTGl0KQoJCWlmIGxlbihjbC5FbHRzKSA9PSAxIHsKCQkJcmV0dXJuIGNsLkVsdHNbMF0sIGYsIG5pbAoJCX0KCQlyZXR1cm4gRXhwckxpc3QoY2wuRWx0cyksIGYsIG5pbAoJfQoKCS8vIHRoZW4gdHJ5IGFzIHN0YXRlbWVudHMKCWFzU3RtdHMgOj0gZXhlY1RtcGwodG1wbFN0bXRzLCBzcmMpCglpZiBmLCBlcnIgOj0gcGFyc2VyLlBhcnNlRmlsZShmc2V0LCAiIiwgYXNTdG10cywgMCk7IGVyciA9PSBuaWwgJiYgbm9CYWROb2RlcyhmKSB7CgkJYmwgOj0gZi5EZWNsc1swXS4oKmFzdC5GdW5jRGVjbCkuQm9keQoJCWlmIGxlbihibC5MaXN0KSA9PSAxIHsKCQkJcmV0dXJuIGJsLkxpc3RbMF0sIGYsIG5pbAoJCX0KCQlyZXR1cm4gU3RtdExpc3QoYmwuTGlzdCksIGYsIG5pbAoJfSBlbHNlIHsKCQkvLyBTdGF0ZW1lbnRzIGlzIHdoYXQgY292ZXJzIG1vc3QgY2FzZXMsIHNvIGl0IHdpbGwgZ2l2ZQoJCS8vIHRoZSBiZXN0IG92ZXJhbGwgZXJyb3IgbWVzc2FnZS4gU2hvdyBwb3NpdGlvbnMKCQkvLyByZWxhdGl2ZSB0byB3aGVyZSB0aGUgdXNlcidzIGNvZGUgaXMgcHV0IGluIHRoZQoJCS8vIHRlbXBsYXRlLgoJCW1haW5FcnIgPSBTdWJQb3NPZmZzZXRzKGVyciwgUG9zT2Zmc2V0ezEsIDEsIDIyfSkKCX0KCgkvLyB0eXBlIGV4cHJlc3Npb25zIG5vdCB5ZXQgcGlja2VkIHVwLCBmb3IgZS5nLiBjaGFucyBhbmQgaW50ZXJmYWNlcwoJaWYgdHlwLCBmLCBlcnIgOj0gUGFyc2VUeXBlKGZzZXQsIHNyYyk7IGVyciA9PSBuaWwgJiYgbm9CYWROb2RlcyhmKSB7CgkJcmV0dXJuIHR5cCwgZiwgbmlsCgl9CgoJLy8gdmFsdWUgc3BlY3MKCWFzVmFsU3BlYyA6PSBleGVjVG1wbCh0bXBsVmFsU3BlYywgc3JjKQoJaWYgZiwgZXJyIDo9IHBhcnNlci5QYXJzZUZpbGUoZnNldCwgIiIsIGFzVmFsU3BlYywgMCk7IGVyciA9PSBuaWwgJiYgbm9CYWROb2RlcyhmKSB7CgkJdnMgOj0gZi5EZWNsc1swXS4oKmFzdC5HZW5EZWNsKS5TcGVjc1swXS4oKmFzdC5WYWx1ZVNwZWMpCgkJcmV0dXJuIHZzLCBmLCBuaWwKCX0KCXJldHVybiBuaWwsIG5pbCwgbWFpbkVycgp9Cgp0eXBlIFBvc09mZnNldCBzdHJ1Y3QgewoJQXRMaW5lLCBBdENvbCBpbnQKCU9mZnNldCAgICAgICAgaW50Cn0KCmZ1bmMgU3ViUG9zT2Zmc2V0cyhlcnIgZXJyb3IsIG9mZnMgLi4uUG9zT2Zmc2V0KSBlcnJvciB7CglsaXN0LCBvayA6PSBlcnIuKHNjYW5uZXIuRXJyb3JMaXN0KQoJaWYgIW9rIHsKCQlyZXR1cm4gZXJyCgl9Cglmb3IgaSwgZXJyIDo9IHJhbmdlIGxpc3QgewoJCWZvciBfLCBvZmYgOj0gcmFuZ2Ugb2ZmcyB7CgkJCWlmIGVyci5Qb3MuTGluZSAhPSBvZmYuQXRMaW5lIHsKCQkJCWNvbnRpbnVlCgkJCX0KCQkJaWYgZXJyLlBvcy5Db2x1bW4gPCBvZmYuQXRDb2wgewoJCQkJY29udGludWUKCQkJfQoJCQllcnIuUG9zLkNvbHVtbiAtPSBvZmYuT2Zmc2V0CgkJfQoJCWxpc3RbaV0gPSBlcnIKCX0KCXJldHVybiBsaXN0Cn0K"},
	{"gsyntax/syntax.go", "Ly8gQ29weXJpZ2h0IChjKSAyMDE3LCBEYW5pZWwgTWFydMOtIDxtdmRhbkBtdmRhbi5jYz4KLy8gU2VlIExJQ0VOU0UgZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbgoKcGFja2FnZSBnc3ludGF4CgppbXBvcnQgKAoJImJ5dGVzIgoJImZtdCIKCSJnby9hc3QiCgkiZ28vcHJpbnRlciIKCSJnby90b2tlbiIKCSJpbyIKCSJyZWdleHAiCgkic3RyY29udiIKCSJzdHJpbmdzIgopCgovLyBJbnNwZWN0IGlzIGxpa2UgYXN0Lkluc3BlY3QsIGJ1dCBpdCBzdXBwb3J0cyBvdXIgZXh0cmEgTm9kZUxpc3QgTm9kZQovLyB0eXBlIChvbmx5IGF0IHRoZSB0b3AgbGV2ZWwpLgpmdW5jIEluc3BlY3Qobm9kZSBhc3QuTm9kZSwgZm4gZnVuYyhhc3QuTm9kZSkgYm9vbCkgewoJLy8gYXN0LldhbGsgYmFyZnMgb24gYXN0Lk5vZGUgdHlwZXMgaXQgZG9lc24ndCBrbm93LCBzbwoJLy8gZG8gdGhlIGZpcnN0IGxldmVsIG1hbnVhbGx5IGhlcmUKCWxpc3QsIG9rIDo9IG5vZGUuKE5vZGVMaXN0KQoJaWYgIW9rIHsKCQlhc3QuSW5zcGVjdChub2RlLCBmbikKCQlyZXR1cm4KCX0KCWlmICFmbihsaXN0KSB7CgkJcmV0dXJuCgl9Cglmb3IgaSA6PSAwOyBpIDwgbGlzdC5MZW4oKTsgaSsrIHsKCQlhc3QuSW5zcGVjdChsaXN0LkF0KGkpLCBmbikKCX0KCWZuKG5pbCkKfQoKdHlwZSAoCglFeHByTGlzdCAgW11hc3QuRXhwcgoJSWRlbnRMaXN0IFtdKmFzdC5JZGVudAoJU3RtdExpc3QgIFtdYXN0LlN0bXQKCVNwZWNMaXN0ICBbXWFzdC5TcGVjCglGaWVsZExpc3QgW10qYXN0LkZpZWxkCikKCnR5cGUgTm9kZUxpc3QgaW50ZXJmYWNlIHsKCUF0KGkgaW50KSBhc3QuTm9kZQoJTGVuKCkgaW50CglTbGljZShmcm9tLCB0byBpbnQpIE5vZGVMaXN0Cglhc3QuTm9kZQp9CgpmdW5jIChsIEV4cHJMaXN0KSBMZW4oKSBpbnQgIHsgcmV0dXJuIGxlbihsKSB9CmZ1bmMgKGwgSWRlbnRMaXN0KSBMZW4oKSBpbnQgeyByZXR1cm4gbGVuKGwpIH0KZnVuYyAobCBTdG10TGlzdCkgTGVuKCkgaW50ICB7IHJldHVybiBsZW4obCkgfQpmdW5jIChsIFNwZWNMaXN0KSBMZW4oKSBpbnQgIHsgcmV0dXJuIGxlbihsKSB9CmZ1bmMgKGwgRmllbGRMaXN0KSBMZW4oKSBpbnQgeyByZXR1cm4gbGVuKGwpIH0KCmZ1bmMgKGwgRXhwckxpc3QpIEF0KGkgaW50KSBhc3QuTm9kZSAgeyByZXR1cm4gbFtpXSB9CmZ1bmMgKGwgSWRlbnRMaXN0KSBBdChpIGludCkgYXN0Lk5vZGUgeyByZXR1cm4gbFtpXSB9CmZ1bmMgKGwgU3RtdExpc3QpIEF0KGkgaW50KSBhc3QuTm9kZSAgeyByZXR1cm4gbFtpXSB9CmZ1bmMgKGwgU3BlY0xpc3QpIEF0KGkgaW50KSBhc3QuTm9kZSAgeyByZXR1cm4gbFtpXSB9CmZ1bmMgKGwgRmllbGRMaXN0KSBBdChpIGludCkgYXN0Lk5vZGUgeyByZXR1cm4gbFtpXSB9CgpmdW5jIChsIEV4cHJMaXN0KSBTbGljZShpLCBqIGludCkgTm9kZUxpc3QgIHsgcmV0dXJuIGxbaTpqXSB9CmZ1bmMgKGwgSWRlbnRMaXN0KSBTbGljZShpLCBqIGludCkgTm9kZUxpc3QgeyByZXR1cm4gbFtpOmpdIH0KZnVuYyAobCBTdG10TGlzdCkgU2xpY2UoaSwgaiBpbnQpIE5vZGVMaXN0ICB7IHJldHVybiBsW2k6al0gfQpmdW5jIChsIFNwZWNMaXN0KSBTbGljZShpLCBqIGludCkgTm9kZUxpc3QgIHsgcmV0dXJuIGxbaTpqXSB9CmZ1bmMgKGwgRmllbGRMaXN0KSBTbGljZShpLCBqIGludCkgTm9kZUxpc3QgeyByZXR1cm4gbFtpOmpdIH0KCmZ1bmMgKGwgRXhwckxpc3QpIFBvcygpIHRva2VuLlBvcyAgeyByZXR1cm4gbFswXS5Qb3MoKSB9CmZ1bmMgKGwgSWRlbnRMaXN0KSBQb3MoKSB0b2tlbi5Qb3MgeyByZXR1cm4gbFswXS5Qb3MoKSB9CmZ1bmMgKGwgU3RtdExpc3QpIFBvcygpIHRva2VuLlBvcyAgeyByZXR1cm4gbFswXS5Qb3MoKSB9CmZ1bmMgKGwgU3BlY0xpc3QpIFBvcygpIHRva2VuLlBvcyAgeyByZXR1cm4gbFswXS5Qb3MoKSB9CmZ1bmMgKGwgRmllbGRMaXN0KSBQb3MoKSB0b2tlbi5Qb3MgeyByZXR1cm4gbFswXS5Qb3MoKSB9CgpmdW5jIChsIEV4cHJMaXN0KSBFbmQoKSB0b2tlbi5Qb3MgIHsgcmV0dXJuIGxbbGVuKGwpLTFdLkVuZCgpIH0KZnVuYyAobCBJZGVudExpc3QpIEVuZCgpIHRva2VuLlBvcyB7IHJldHVybiBsW2xlbihsKS0xXS5FbmQoKSB9CmZ1bmMgKGwgU3RtdExpc3QpIEVuZCgpIHRva2VuLlBvcyAgeyByZXR1cm4gbFtsZW4obCktMV0uRW5kKCkgfQpmdW5jIChsIFNwZWNMaXN0KSBFbmQoKSB0b2tlbi5Qb3MgIHsgcmV0dXJuIGxbbGVuKGwpLTFdLkVuZCgpIH0KZnVuYyAobCBGaWVsZExpc3QpIEVuZCgpIHRva2VuLlBvcyB7IHJldHVybiBsW2xlbihsKS0xXS5FbmQoKSB9Cgp0eXBlIGJ1ZmZlckpvaW5MaW5lcyBzdHJ1Y3QgewoJYnl0ZXMuQnVmZmVyCglsYXN0IHN0cmluZwp9Cgp2YXIgcnhOZWVkU2VtaWNvbG9uID0gcmVnZXhwLk11c3RDb21waWxlKGAoW10pfWEtekEtWjAtOSInYCArICJgIiArIGBdfFwrXCt8LS0pJGApCgpmdW5jIChiICpidWZmZXJKb2luTGluZXMpIFdyaXRlKHAgW11ieXRlKSAobiBpbnQsIGVyciBlcnJvcikgewoJaWYgc3RyaW5nKHApID09ICJcbiIgewoJCWlmIGIubGFzdCA9PSAiXG4iIHsKCQkJcmV0dXJuIDEsIG5pbAoJCX0KCQlpZiByeE5lZWRTZW1pY29sb24uTWF0Y2hTdHJpbmcoYi5sYXN0KSB7CgkJCWIuQnVmZmVyLldyaXRlQnl0ZSgnOycpCgkJfQoJCWIuQnVmZmVyLldyaXRlQnl0ZSgnICcpCgkJYi5sYXN0ID0gIlxuIgoJCXJldHVybiAxLCBuaWwKCX0KCXAgPSBieXRlcy5UcmltKHAsICJcdCIpCgluLCBlcnIgPSBiLkJ1ZmZlci5Xcml0ZShwKQoJYi5sYXN0ID0gc3RyaW5nKHApCglyZXR1cm4KfQoKZnVuYyAoYiAqYnVmZmVySm9pbkxpbmVzKSBTdHJpbmcoKSBzdHJpbmcgewoJcmV0dXJuIHN0cmluZ3MuVHJpbVN1ZmZpeChiLkJ1ZmZlci5TdHJpbmcoKSwgIjsgIikKfQoKdmFyIGVtcHR5RnNldCA9IHRva2VuLk5ld0ZpbGVTZXQoKQoKZnVuYyBQcmludENvbXBhY3Qobm9kZSBhc3QuTm9kZSkgc3RyaW5nIHsKCXZhciBidWYgYnVmZmVySm9pbkxpbmVzCglJbnNwZWN0KG5vZGUsIGZ1bmMobm9kZSBhc3QuTm9kZSkgYm9vbCB7CgkJYmwsIG9rIDo9IG5vZGUuKCphc3QuQmFzaWNMaXQpCgkJaWYgIW9rIHx8IGJsLktpbmQgIT0gdG9rZW4uU1RSSU5HIHsKCQkJcmV0dXJuIHRydWUKCQl9CgkJaWYgIXN0cmluZ3MuSGFzUHJlZml4KGJsLlZhbHVlLCAiYCIpIHsKCQkJcmV0dXJuIHRydWUKCQl9CgkJaWYgIXN0cmluZ3MuQ29udGFpbnMoYmwuVmFsdWUsICJcbiIpIHsKCQkJcmV0dXJuIHRydWUKCQl9CgkJYmwuVmFsdWUgPSBzdHJjb252LlF1b3RlKGJsLlZhbHVlWzEgOiBsZW4oYmwuVmFsdWUpLTFdKQoJCXJldHVybiB0cnVlCgl9KQoJUHJpbnQoJmJ1ZiwgZW1wdHlGc2V0LCBub2RlKQoJcmV0dXJuIGJ1Zi5TdHJpbmcoKQp9CgpmdW5jIFByaW50KHcgaW8uV3JpdGVyLCBGc2V0ICp0b2tlbi5GaWxlU2V0LCBub2RlIGFzdC5Ob2RlKSB7Cglzd2l0Y2ggeCA6PSBub2RlLih0eXBlKSB7CgljYXNlIEV4cHJMaXN0OgoJCWlmIGxlbih4KSA9PSAwIHsKCQkJcmV0dXJuCgkJfQoJCVByaW50KHcsIEZzZXQsIHhbMF0pCgkJZm9yIF8sIG4gOj0gcmFuZ2UgeFsxOl0gewoJCQlmbXQuRnByaW50Zih3LCAiLCAiKQoJCQlQcmludCh3LCBGc2V0LCBuKQoJCX0KCWNhc2UgU3RtdExpc3Q6CgkJaWYgbGVuKHgpID09IDAgewoJCQlyZXR1cm4KCQl9CgkJUHJpbnQodywgRnNldCwgeFswXSkKCQlmb3IgXywgbiA6PSByYW5nZSB4WzE6XSB7CgkJCWZtdC5GcHJpbnRmKHcsICI7ICIpCgkJCVByaW50KHcsIEZzZXQsIG4pCgkJfQoJZGVmYXVsdDoKCQllcnIgOj0gcHJpbnRlci5GcHJpbnQodywgRnNldCwgbm9kZSkKCQlpZiBlcnIgIT0gbmlsICYmIHN0cmluZ3MuQ29udGFpbnMoZXJyLkVycm9yKCksICJnby9wcmludGVyOiB1bnN1cHBvcnRlZCBub2RlIHR5cGUiKSB7CgkJCS8vIFNob3VsZCBuZXZlciBoYXBwZW4sIGJ1dCBtYWtlIGl0IG9idmlvdXMgd2hlbiBpdCBkb2VzLgoJCQlwYW5pYyhmbXQuRXJyb3JmKCJjYW5ub3QgcHJpbnQgbm9kZSAlVDogJXYiLCBub2RlLCBlcnIpKQoJCX0KCX0KfQo"},
	{"internal/load/load.go", "Ly8gQ29weXJpZ2h0IChjKSAyMDE3LCBEYW5pZWwgTWFydMOtIDxtdmRhbkBtdmRhbi5jYz4KLy8gU2VlIExJQ0VOU0UgZm9yIGxpY2Vuc2luZyBpbmZvcm1hdGlvbgoKcGFja2FnZSBsb2FkCgppbXBvcnQgKAoJImZtdCIKCSJnby9hc3QiCgkiZ28vaW1wb3J0ZXIiCgkiZ28vdHlwZXMiCgkic29ydCIKCgkiZ29sYW5nLm9yZy94L3Rvb2xzL2dvL3BhY2thZ2VzIgoKCSJtdmRhbi5jYy9nb2dyZXAvZ3N5bnRheCIKCSJtdmRhbi5jYy9nb2dyZXAvbmxzIgopCgpmdW5jIElucHV0KGcgKm5scy5HLCBzcmMgc3RyaW5nKSAoYXN0Lk5vZGUsIGVycm9yKSB7Cglub2RlLCBmaWxlLCBlcnIgOj0gZ3N5bnRheC5QYXJzZUFueShnLkZzZXQsIHNyYykKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoKCS8vIFR5cGUtY2hlY2tpbmcgaXMgYXR0ZW1wdGVkIG9uIGEgYmVzdC1lZmZvcnQgYmFzaXMuCglnLkluZm8gPSAmdHlwZXMuSW5mb3sKCQlUeXBlczogIG1ha2UobWFwW2FzdC5FeHByXXR5cGVzLlR5cGVBbmRWYWx1ZSksCgkJRGVmczogICBtYWtlKG1hcFsqYXN0LklkZW50XXR5cGVzLk9iamVjdCksCgkJVXNlczogICBtYWtlKG1hcFsqYXN0LklkZW50XXR5cGVzLk9iamVjdCksCgkJU2NvcGVzOiBtYWtlKG1hcFthc3QuTm9kZV0qdHlwZXMuU2NvcGUpLAoJfQoJcGtnIDo9IHR5cGVzLk5ld1BhY2thZ2UoIiIsICIiKQoJY29uZmlnIDo9ICZ0eXBlcy5Db25maWd7CgkJSW1wb3J0ZXI6IGltcG9ydGVyLkRlZmF1bHQoKSwKCQlFcnJvcjogICAgZnVuYyhlcnJvcikge30sIC8vIGRvbid0IHN0b3AgYXQgdGhlIGZpcnN0IGVycm9yCgl9CgljaGVjayA6PSB0eXBlcy5OZXdDaGVja2VyKGNvbmZpZywgZy5Gc2V0LCBwa2csIGcuSW5mbykKCV8gPSBjaGVjay5GaWxlcyhbXSphc3QuRmlsZXtmaWxlfSkKCWcuU2NvcGUgPSBwa2cuU2NvcGUoKQoJcmV0dXJuIG5vZGUsIG5pbAp9CgpmdW5jIFBrZ3NFcnIocGtncyBbXSpwYWNrYWdlcy5QYWNrYWdlKSBlcnJvciB7Cglqb2ludEVyciA6PSAiIgoJcGFja2FnZXMuVmlzaXQocGtncywgbmlsLCBmdW5jKHBrZyAqcGFja2FnZXMuUGFja2FnZSkgewoJCWZvciBfLCBlcnIgOj0gcmFuZ2UgcGtnLkVycm9ycyB7CgkJCWpvaW50RXJyICs9IGVyci5FcnJvcigpICsgIlxuIgoJCX0KCX0pCglpZiBqb2ludEVyciAhPSAiIiB7CgkJcmV0dXJuIGZtdC5FcnJvcmYoIiVzIiwgam9pbnRFcnIpCgl9CglyZXR1cm4gbmlsCn0KCmZ1bmMgQXJncyhnICpubHMuRywgYXJncyAuLi5zdHJpbmcpIChbXSpwYWNrYWdlcy5QYWNrYWdlLCBlcnJvcikgewoJbW9kZSA6PSBwYWNrYWdlcy5OZWVkTmFtZSB8IHBhY2thZ2VzLk5lZWRJbXBvcnRzIHwgcGFja2FnZXMuTmVlZFN5bnRheCB8CgkJcGFja2FnZXMuTmVlZFR5cGVzIHwgcGFja2FnZXMuTmVlZFR5cGVzSW5mbwoJY2ZnIDo9ICZwYWNrYWdlcy5Db25maWd7CgkJTW9kZTogIG1vZGUsCgkJRnNldDogIGcuRnNldCwKCQlUZXN0czogZy5UZXN0cywKCX0KCXBrZ3MsIGVyciA6PSBwYWNrYWdlcy5Mb2FkKGNmZywgYXJncy4uLikKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoJaWYgZXJyIDo9IFBrZ3NFcnIocGtncyk7IGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoJc29ydC5TbGljZShwa2dzLCBmdW5jKGksIGogaW50KSBib29sIHsKCQlyZXR1cm4gcGtnc1tpXS5Qa2dQYXRoIDwgcGtnc1tqXS5Qa2dQYXRoCgl9KQoJcmV0dXJuIHBrZ3MsIG5pbAp9Cg"},
}
